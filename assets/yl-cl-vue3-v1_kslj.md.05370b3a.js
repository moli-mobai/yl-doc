import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.366ac521.js";const u=JSON.parse('{"title":"快速了解","description":"","frontmatter":{},"headers":[],"relativePath":"yl-cl-vue3-v1/kslj.md"}'),e={name:"yl-cl-vue3-v1/kslj.md"},p=l(`<h1 id="快速了解" tabindex="-1">快速了解 <a class="header-anchor" href="#快速了解" aria-label="Permalink to &quot;快速了解&quot;">​</a></h1><p>本项目是基于 Vue3 + TS + Vite + Pinia + Element Plus 实现的一个后台管理系统，采用 git Husky 搭配 commitizen 进行项目管理，阻止开发不规范提交。</p><p>Vue3 官网地址：<a href="https://cn.vuejs.org/guide/introduction.html" target="_blank" rel="noreferrer">https://cn.vuejs.org/guide/introduction.html</a></p><p>Element Plus 官网地址：<a href="https://element-plus.org/zh-CN" target="_blank" rel="noreferrer">https://element-plus.org/zh-CN</a></p><p>联系人微信：moli-mobai</p><h2 id="环境依赖版本" tabindex="-1">环境依赖版本 <a class="header-anchor" href="#环境依赖版本" aria-label="Permalink to &quot;环境依赖版本&quot;">​</a></h2><ul><li><a href="https://github.com/nodejs/node" target="_blank" rel="noreferrer">node</a>：^18.7.15</li><li><a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">vite</a>：^3.2.3</li><li><a href="https://github.com/vuejs/vue" target="_blank" rel="noreferrer">vue</a>：^3.2.45</li><li><a href="https://github.com/microsoft/TypeScript" target="_blank" rel="noreferrer">typescript</a>：^4.8.2</li><li><a href="https://github.com/vuejs/pinia" target="_blank" rel="noreferrer">pinia</a>：^2.0.22</li><li><a href="https://github.com/vuejs/router" target="_blank" rel="noreferrer">vue-router</a>：^4.1.4</li><li><a href="https://github.com/vueuse/vueuse" target="_blank" rel="noreferrer">vueuse</a>：^9.5.0</li><li><a href="https://github.com/eslint/eslint" target="_blank" rel="noreferrer">eslint</a>：^8.23.0</li><li><a href="https://github.com/prettier/prettier" target="_blank" rel="noreferrer">prettier</a>：^2.6.1</li><li><a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">husky</a>：^8.0.3</li><li><a href="https://github.com/sass/dart-sass" target="_blank" rel="noreferrer">sass</a>：^1.56.1</li><li><a href="https://github.com/antfu/unplugin-auto-import" target="_blank" rel="noreferrer">unplugin-auto-import</a>：^0.11.4</li><li><a href="https://github.com/antfu/unplugin-vue-components" target="_blank" rel="noreferrer">unplugin-vue-components</a>：^0.22.4</li></ul><h2 id="运行项目" tabindex="-1">运行项目 <a class="header-anchor" href="#运行项目" aria-label="Permalink to &quot;运行项目&quot;">​</a></h2><h3 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h3><p>建议使用 Git 克隆拉取项目，因为克隆的方式可以随时保持更新同步。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 克隆项目</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone git@gitcode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">net:xxx</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">xxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 进入项目目录</span></span>
<span class="line"><span style="color:#A6ACCD;">cd ylc3</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 安装依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 启动项目</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 前端访问地址 </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//localhost:80</span></span>
<span class="line"></span></code></pre></div><h3 id="git-版本提交" tabindex="-1">git 版本提交 <a class="header-anchor" href="#git-版本提交" aria-label="Permalink to &quot;git 版本提交&quot;">​</a></h3><p>git Husky 搭配 commitizen 可以帮助我们在执行 git commit（废弃） 提交的时候，按照 eslint 规范进行简单代码修复，若提交失败则是<a href="/yl-doc/yl-cl-vue3-v1/kslj.html#代码规范">代码规范</a>或者语法存在问题。</p><p>本项目不使用原来的 git commit -m 进行提交，现使用 git cz 进行项目提交。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 是否拥有全局commitizen</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">全局安装commitizen。</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm install </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">g commitizen</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 查看修改文件</span></span>
<span class="line"><span style="color:#A6ACCD;">git status</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 添加所有文件到暂存区</span></span>
<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 将暂存区内容提交到版本库</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">使用 git cz 代替原来的 git commit </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m</span></span>
<span class="line"><span style="color:#A6ACCD;">git cz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># git cz </span><span style="color:#FFCB6B;">使用例子</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> 请选择提交类型</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> feat</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">请简要描述提交</span><span style="color:#A6ACCD;">(必填)</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 新增了一个功能</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> 确认使用以上信息提交？(y</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">h) Yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 上传版本库</span></span>
<span class="line"><span style="color:#A6ACCD;">git push</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">git cz 使用方法温馨提示！ 1.选择本次更新提交的类型(参数如下所示)。</p><p>2.对于本次更新进行描述。</p><p>3.输入 y 回车就行，确认提交信息。</p><p>git cz 命令推荐使用 cmd 命令符，因为 git bash 不能上下选择提交类型！！！</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 提交类型</span></span>
<span class="line"><span style="color:#FFCB6B;">feat</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 添加新特性</span></span>
<span class="line"><span style="color:#FFCB6B;">fix</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 修复bug</span></span>
<span class="line"><span style="color:#FFCB6B;">docs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 仅仅修改了文档</span></span>
<span class="line"><span style="color:#FFCB6B;">style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑</span></span>
<span class="line"><span style="color:#FFCB6B;">refactor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 代码重构，没有加新功能或者修复bug</span></span>
<span class="line"><span style="color:#A6ACCD;">perf：增加代码进行性能测试 或性能优化</span></span>
<span class="line"><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 增加测试用例</span></span>
<span class="line"><span style="color:#FFCB6B;">chore</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 改变构建流程、或者增加依赖库、工具等</span></span>
<span class="line"><span style="color:#FFCB6B;">merge</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 代码合并</span></span>
<span class="line"><span style="color:#FFCB6B;">revert</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 回滚</span></span>
<span class="line"></span></code></pre></div><p>如何自己搭建 git Husky?(<a href="https://blog.csdn.net/ailsa_csdn/article/details/123954394" target="_blank" rel="noreferrer">传送门</a>)</p><h2 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h2><p>推荐使用 VSCode 进行项目开发，通过 ESLint + Prettier + VSCode 配置与配合处理，最终达到在保存代码时，自动规范化代码格式的目的。</p><h3 id="eslint-和-prettier-配合解决代码格式问题" tabindex="-1">ESlint 和 Prettier 配合解决代码格式问题 <a class="header-anchor" href="#eslint-和-prettier-配合解决代码格式问题" aria-label="Permalink to &quot;ESlint 和 Prettier 配合解决代码格式问题&quot;">​</a></h3><p>1.VSCode 需要安装 prettier 的插件。</p><p>2.VSCode 中的配置：第一步<code>settings =&gt;format on save =&gt; 勾选上</code>，第二步<code>settings =&gt; editor default format =&gt; 选择 prettier</code>。 3.VSCode 需要安装 ESLint 插件。</p><div class="tip custom-block"><p class="custom-block-title">项目根目录存在 prettier.json 文件，配置说明!</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">semi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">语句末尾是否要加分号</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tabWidth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tab是几个空格</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">singleQuote</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">使用单引号还是双引号</span><span style="color:#F07178;">，</span><span style="color:#A6ACCD;">true为单引号</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">printWidth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">120</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">单行字符的长度</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">trailingComma</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">对象类型的最后一个属性后面是否加一个</span><span style="color:#F07178;">，(</span><span style="color:#A6ACCD;">逗号</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div>`,24),t=[p];function o(r,c,i,y,D,C){return n(),a("div",null,t)}const A=s(e,[["render",o]]);export{u as __pageData,A as default};
